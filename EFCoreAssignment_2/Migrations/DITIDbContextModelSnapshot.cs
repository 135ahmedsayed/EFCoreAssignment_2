// <auto-generated />
using System;
using EFCoreAssignment_2.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EFCoreAssignment_2.Migrations
{
    [DbContext(typeof(DITIDbContext))]
    partial class DITIDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CoursesInstructors", b =>
                {
                    b.Property<int>("coursesId")
                        .HasColumnType("int");

                    b.Property<int>("instructorsId")
                        .HasColumnType("int");

                    b.HasKey("coursesId", "instructorsId");

                    b.HasIndex("instructorsId");

                    b.ToTable("CoursesInstructors");
                });

            modelBuilder.Entity("CoursesStudent", b =>
                {
                    b.Property<int>("StudentsId")
                        .HasColumnType("int");

                    b.Property<int>("coursesId")
                        .HasColumnType("int");

                    b.HasKey("StudentsId", "coursesId");

                    b.HasIndex("coursesId");

                    b.ToTable("CoursesStudent");
                });

            modelBuilder.Entity("EFCoreAssignment_2.Models.Courses", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("VarChar");

                    b.Property<int>("Top_id")
                        .HasColumnType("int");

                    b.Property<int>("topicsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("topicsId");

                    b.ToTable("Course");
                });

            modelBuilder.Entity("EFCoreAssignment_2.Models.Departments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("HiringDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Ins_Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Ins_Id");

                    b.HasIndex("StudentId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("EFCoreAssignment_2.Models.Instructors", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("Bouns")
                        .HasColumnType("Decimal(3,2)");

                    b.Property<int>("Dep_id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("VarChar");

                    b.Property<decimal>("Salary")
                        .HasColumnType("Decimal(10,2)");

                    b.Property<decimal?>("hourrate")
                        .HasColumnType("Decimal(5,2)");

                    b.HasKey("Id");

                    b.HasIndex("Dep_id");

                    b.ToTable("Instructors");
                });

            modelBuilder.Entity("EFCoreAssignment_2.Models.StudCourse", b =>
                {
                    b.Property<int>("Stud_Id")
                        .HasColumnType("int");

                    b.Property<int>("Course_Id")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<double>("Grade")
                        .HasColumnType("float");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Stud_Id", "Course_Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("Course_Id");

                    b.HasIndex("StudentId");

                    b.ToTable("StudCourses", (string)null);
                });

            modelBuilder.Entity("EFCoreAssignment_2.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<int?>("Dep_id")
                        .HasColumnType("int");

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("VarChar");

                    b.Property<string>("LName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("VarChar");

                    b.HasKey("Id");

                    b.HasIndex("Dep_id");

                    b.ToTable("Students", (string)null);
                });

            modelBuilder.Entity("EFCoreAssignment_2.Models.Topics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Topics");
                });

            modelBuilder.Entity("CoursesInstructors", b =>
                {
                    b.HasOne("EFCoreAssignment_2.Models.Courses", null)
                        .WithMany()
                        .HasForeignKey("coursesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFCoreAssignment_2.Models.Instructors", null)
                        .WithMany()
                        .HasForeignKey("instructorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CoursesStudent", b =>
                {
                    b.HasOne("EFCoreAssignment_2.Models.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFCoreAssignment_2.Models.Courses", null)
                        .WithMany()
                        .HasForeignKey("coursesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EFCoreAssignment_2.Models.Courses", b =>
                {
                    b.HasOne("EFCoreAssignment_2.Models.Topics", "topics")
                        .WithMany("courses")
                        .HasForeignKey("topicsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("topics");
                });

            modelBuilder.Entity("EFCoreAssignment_2.Models.Departments", b =>
                {
                    b.HasOne("EFCoreAssignment_2.Models.Instructors", "ManagerIns")
                        .WithMany("departments")
                        .HasForeignKey("Ins_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EFCoreAssignment_2.Models.Student", null)
                        .WithMany("departments")
                        .HasForeignKey("StudentId");

                    b.Navigation("ManagerIns");
                });

            modelBuilder.Entity("EFCoreAssignment_2.Models.Instructors", b =>
                {
                    b.HasOne("EFCoreAssignment_2.Models.Departments", "departments1")
                        .WithMany("instructors")
                        .HasForeignKey("Dep_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("departments1");
                });

            modelBuilder.Entity("EFCoreAssignment_2.Models.StudCourse", b =>
                {
                    b.HasOne("EFCoreAssignment_2.Models.Courses", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFCoreAssignment_2.Models.Courses", null)
                        .WithMany("StudCourses")
                        .HasForeignKey("Course_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EFCoreAssignment_2.Models.Student", null)
                        .WithMany("StudCourses")
                        .HasForeignKey("Stud_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EFCoreAssignment_2.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("EFCoreAssignment_2.Models.Student", b =>
                {
                    b.HasOne("EFCoreAssignment_2.Models.Departments", null)
                        .WithMany()
                        .HasForeignKey("Dep_id");
                });

            modelBuilder.Entity("EFCoreAssignment_2.Models.Courses", b =>
                {
                    b.Navigation("StudCourses");
                });

            modelBuilder.Entity("EFCoreAssignment_2.Models.Departments", b =>
                {
                    b.Navigation("instructors");
                });

            modelBuilder.Entity("EFCoreAssignment_2.Models.Instructors", b =>
                {
                    b.Navigation("departments");
                });

            modelBuilder.Entity("EFCoreAssignment_2.Models.Student", b =>
                {
                    b.Navigation("StudCourses");

                    b.Navigation("departments");
                });

            modelBuilder.Entity("EFCoreAssignment_2.Models.Topics", b =>
                {
                    b.Navigation("courses");
                });
#pragma warning restore 612, 618
        }
    }
}
